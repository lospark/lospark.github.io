<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[1.环境搭建]]></title>
    <url>%2F2019%2F08%2F11%2F1.%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[1.下载 go语言包 网址上输入studygolang.com，点击下载，下载golang的版本 一般是goXXX版本windows-amd64.zip包 下载后放到本地一个位置，直接解压即可，比如E:\Program Files\go 2.配置环境变量 (1).添加系统环境变量GOROOT(语言包)、GOPATH(工作空间目录) (2).添加path，%GOROOT%\bin;%GOPATH%\bin; (3).工作空间中添加3个文件夹src、bin、pkg 3.简单命令 go version go(查看各种命令) go run：直接运行程序 go build：测试编译 go fmt：格式化源码(部分idea 保存时自动调用) go install： 编译包文件并编译整个程序 go test：运行测试文件 go doc：查看帮助文档 godoc -http=:8080(启动本地官网，输入http://localhost:8080) 4.程序整体结构 bin/ mathapp pkg/ 平台名/(比如window_amd64、linux_amd64) mymath.a(引用的包文件) src/ mathapp main.go mymath(引用包文件) 5.命令使用 运行过程分析：运行 go install 首先编译src下应用的包文件，在pkg中生成对应的.a文件，最后编译src下的main.go，在bin目录下生成.exe可执行文件。 生成后.exe文件后，.exe真正运行时，需要将.exe文件重新拷贝至 src目录下(exe与src文件存在相对路径)。 6.环境变量 (1).三个环境变量 GOROOT：Go语言安装根目录的路径，也就是GO语言的安装路径。 GOPATH：若干工作区目录的路径。是我们自己定义的工作空间。 GOBIN：GO程序生成的可执行文件（executable file）的路径。 (2). Go语言源码的组织方式 ①.Go语言的源码也是以代码包为基本组织单位的。在文件系统中，这些代码包其实是与目录一一对应的 ②.一个代码包中可以包含任意个以.go为扩展名的源码文件，这些源码文件都需要被声明属于同一个代码包。 ③.每个代码包都会有导入路径。代码包的导入路径是其他代码在使用该包中的程序实体时，需要引入的路径。 1import &quot;github.com/labstack/echo&quot; ④.在工作区中，一个代码包的导入路径实际上就是从src子目录，到该包的实际存储位置的相对路径。 ⑤.Go语言的源码文件都需要被存放在环境变量GOPATH包含的某个工作区（目录）中的src目录下的某个代码包（目录）中。 7.源码安装后的结果 (1).源码文件通常会被放在某个工作区的src子目录下。安装后如果产生了归档文件（以“.a”为扩展名的文件，这个文件解压后是一个代码包），就会放进该工作区的pkg子目录；如果产生了可执行文件，就可能会放进该工作区的bin子目录。 (2).归档文件存放的具体位置和规则。 ①.源码文件会以代码包的形式组织起来，一个代码包其实就对应一个目录。安装某个代码包而产生的归档文件是与这个代码包同名的。 ②.比如，一个已存在的代码包的导入路径是 1github.com/labstack/echo 那么执行命令 1go install github.com/labstack/echo 生成的归档文件的相对目录就是 github.com/labstack 文件名为echo.a。上面这个代码包导入路径还有另外一层含义，那就是：该代码包的源码文件存在于GitHub网站的labstack组的代码仓库echo中。 ③.归档文件的相对目录与pkg目录之间还有一级目录，叫做平台相关目录。平台相关目录的名称是由build（也称“构建”）的目标操作系统、下划线和目标计算架构的代号组成的。 上述代码包的归档文件就会被放置在当前工作区的子目录pkg/linux_amd64/github.com/labstack中。 8.构建和安装Go程序的过程 (1).构建使用命令go build，安装使用命令go install。构建和安装代码包的时候都会执行编译、打包等操作，并且，这些操作生成的任何文件都会先被保存到某个临时的目录中。 (2).构建 如果构建的是库源码文件，那么操作后产生的结果文件只会存在于临时目录中。这里的构建的主要意义在于检查和验证。 如果构建的是命令源码文件，那么操作的结果文件会被搬运到源码文件所在的目录中。 (3).安装 安装操作会先执行构建，然后还会进行链接操作，并且把结果文件搬运到指定目录。 如果安装的是库源码文件，那么结果文件会被搬运到它所在工作区的pkg目录下的某个子目录中。 如果安装的是命令源码文件，那么结果文件会被搬运到它所在工作区的bin目录中，或者环境变量GOBIN指向的目录中。]]></content>
      <categories>
        <category>1.Golang</category>
        <category>1.环境搭建</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
</search>
